name: CI/CD Pipeline for Dockerized Spring Boot App

on:
   workflow_dispatch

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Create application.properties
        run: |
          mkdir -p src/main/resources
          printf '%s' "${{ secrets.APPLICATION_PROPERTIES }}" > src/main/resources/application.properties


      - name: Build with Maven
        run: mvn -B clean package -Dmaven.test.skip=true --file pom.xml
        
      - name: Naming jar file
        run: mv ./target/*.jar ./target/app.jar

      - name: Check jar file
        run: ls ./target

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: ./target/app.jar

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/app-with-actions:latest
            ${{ vars.DOCKERHUB_USERNAME }}/app-with-actions:${{ github.sha }}
  cd:
    runs-on: ubuntu-latest
    needs: ci
    steps:
      - name: Create .env File
        run: |
          echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" > .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "APP_NAME=${{ secrets.APP_NAME }}" >> .env
          echo "SERVER_PORT=${{ secrets.SERVER_PORT }}" >> .env

      - name: Create init.sql from Secrets
        run: |
          printf '%s' "${{ secrets.INIT_SQL }}" > init.sql

      - name: Verify Files
        run: |
          cat .env
          cat init.sql
          
      - name: Verify Required Files Before SCP
        run: |
          echo "=== Verifying Files ==="
          ls -l
          if [ ! -f "docker-compose.yml" ]; then
            echo "❌ docker-compose.yml is missing!"
            exit 1
          fi
          if [ ! -f ".env" ]; then
            echo "❌ .env is missing!"
            exit 1
          fi
          if [ ! -f "init.sql" ]; then
            echo "❌ init.sql is missing!"
            exit 1
          fi
          echo "✅ All required files are present."



      - name: Deploy Files to Remote Server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          password: ${{ secrets.EC2_PRIVATE_KEY }}
          source: |
            docker-compose.yml
            .env
            init.sql
          target: "/home/${{ secrets.SERVER_USER }}/app"
          rm: true
          debug: true
         

      - name: Connect and Restart Application with Docker Compose
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          password: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd /home/${{ secrets.SERVER_USER }}/app
            docker-compose down
            docker-compose pull
            docker-compose --env-file .env up -d
            docker-compose ps
