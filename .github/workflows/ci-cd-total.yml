name: CI/CD Pipeline for Dockerized Spring Boot App

on:
   workflow_dispatch

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Naming jar file
        run: mv ./target/*.jar ./target/app.jar

      - name: Check jar file
        run: ls ./target

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: ./target/app.jar

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/app-with-actions:latest
            ${{ vars.DOCKERHUB_USERNAME }}/app-with-actions:${{ github.sha }}

  cd:
    runs-on: ubuntu-latest
    needs: ci
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            echo "Logging into Docker Hub on EC2"
            docker login -u ${{ vars.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            
            echo "Pulling Docker Image"
            docker pull ${{ vars.DOCKERHUB_USERNAME }}/app-with-actions:latest
            
            echo "Stopping and Removing Existing Container"
            docker stop app-container || true
            docker rm app-container || true
            
            echo "Running New Container"
            docker run -d \
              --name app-container \
              -p 80:8080 \
              --env SPRING_PROFILES_ACTIVE=prod \
              ${{ vars.DOCKERHUB_USERNAME }}/app-with-actions:latest
